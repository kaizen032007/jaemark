
    // BASIC JAVA VARIABLES

| Concept                 | Description                  | Example                       | Output (Sample)  |
| ----------------------- | ---------------------------- | ----------------------------- | ---------------- |
| `Scanner.nextLine()`    | Gets the user's full name    | `scanner.nextLine()`          | `"Mark Almeria"` |
| `Scanner.nextInt()`     | Gets the user's age (number) | `scanner.nextInt()`           | `18`             |
| `Random.nextInt(10000)` | Generates a random number    | `random.nextInt(10000)`       | `5837`           |
| `System.out.println()`  | Displays output with newline | `System.out.println("Hello")` | `Hello`          |
| Concept | Description                    | Example                              | Output    |
| ------- | ------------------------------ | ------------------------------------ | --------- |
| `%s`    | String placeholder in `printf` | `System.out.printf("Hi %s", name);`  | `Hi Mark` |
| `%d`    | Integer placeholder            | `System.out.printf("Age: %d", age);` | `Age: 25` |
| `%f`    | Float/Double placeholder       | `System.out.printf("%.2f", gpa);`    | `25.60`   |
| `%b`    | Boolean placeholder            | `System.out.printf("%b", true);`     | `true`    |
| `%c`    | Character placeholder          | `System.out.printf("%c", 'm');`      | `m`       |



    // COMPOUNT INTEREST FORMULA

| Formula                    | Description          | Example Values                 | Output             |
| -------------------------- | -------------------- | ------------------------------ | ------------------ |
| `Math.pow(base, exponent)` | Exponent calculation | `Math.pow(2, 3)`               | `8.0`              |
| Compound Interest Formula  | `P * (1 + r/n)^(nt)` | `1000 * Math.pow(1 + 0.05, 2)` | `1102.50` (approx) |
| `Scanner.nextDouble()`     | Reads decimal number | `scanner.nextDouble()`         | `5.0` (for 5%)     |



    // nested if statements

| Condition Structure      | Description                       | Example Input   | Output                  |
| ------------------------ | --------------------------------- | --------------- | ----------------------- |
| `if (age >= 18)`         | Checks if user is old enough      | `age = 19`      | ✅ Continue next check   |
| `if (hasPSA)`            | Checks for PSA birth certificate  | `true`          | ✅ Continue next check   |
| `if (hasID)`             | Checks for 2 government IDs       | `true`          | ✅ Eligible to vote      |
| `else if` inside nesting | Runs if condition inside is false | `hasID = false` | ⚠ Missing document      |
| `else` from first `if`   | Final fallback if underage        | `age = 17`      | ❌ Too young to register |



    // SUBSTRINGS

| Method                               | Description                                | Example                             | Output          |
| ------------------------------------ | ------------------------------------------ | ----------------------------------- | --------------- |
| `text.substring(0)`                  | Returns entire string from index 0         | `"Hello".substring(0)`              | `"Hello"`       |
| `text.substring(1)`                  | Removes first character                    | `"Hello".substring(1)`              | `"ello"`        |
| `text.substring(0, 2)`               | Gets characters from index 0 to 1          | `"Hello".substring(0, 2)`           | `"He"`          |
| `text.substring(2, 4)`               | Characters from index 2 to 3               | `"Hello".substring(2, 4)`           | `"ll"`          |
| `text.length()` + `substring()`      | Use `.length()` to extract last characters | `text.substring(text.length() - 2)` | `"lo"` (last 2) |
| `text.substring(0, text.length()/2)` | Get first half of a string                 | `"HelloWorld".substring(0, 5)`      | `"Hello"`       |



    // TERNARY OPERATOR 


| Syntax / Pattern                                                 | Description                                        | Example                                                                  | Output            |
| ---------------------------------------------------------------- | -------------------------------------------------- | ------------------------------------------------------------------------ | ----------------- |
| `condition ? expr1 : expr2`                                      | If condition is true, return `expr1`, else `expr2` | `int age = 20;`<br>`String status = (age >= 18) ? "Adult" : "Minor";`    | `"Adult"`         |
| `boolean result = (x > y) ? true : false;`                       | Returns a boolean value                            | `int x = 10, y = 5;`<br>`boolean result = (x > y) ? true : false;`       | `true`            |
| `int max = (a > b) ? a : b;`                                     | Gets the maximum of two numbers                    | `int a = 5, b = 7;`<br>`int max = (a > b) ? a : b;`                      | `7`               |
| `String msg = (score >= 75) ? "Passed" : "Failed";`              | Useful for grade results                           | `int score = 80;`<br>`String msg = (score >= 75) ? "Passed" : "Failed";` | `"Passed"`        |
| `System.out.println((loggedIn) ? "Welcome!" : "Please log in");` | Inline print based on condition                    | `boolean loggedIn = false;`                                              | `"Please log in"` |
| Nesting: `a > b ? (a > c ? a : c) : (b > c ? b : c)`             | Nested ternary to find largest of three numbers    | `a = 5, b = 8, c = 6`                                                    | `8`               |


    // ENHANCED SWITCHES


| Syntax / Pattern                        | Description                            | Example                                                                                                       | Output        |
| --------------------------------------- | -------------------------------------- | ------------------------------------------------------------------------------------------------------------- | ------------- |
| `switch (value) { case ... -> ... }`    | Enhanced arrow-based syntax            | `switch (month) { case "Jan" -> "January"; case "Feb" -> "February"; default -> "Unknown"; }`                 | `"January"`   |
| `case "A", "B" -> ...`                  | Multiple case labels                   | `switch (grade) { case "A", "B" -> "Passed"; default -> "Failed"; }`                                          | `"Passed"`    |
| `String result = switch (...) { ... };` | Switch used as an expression           | `String msg = switch (day) { case 1 -> "Mon"; case 2 -> "Tue"; default -> "Other"; };`                        | `"Mon"`       |
| `case ... -> { yield ...; }`            | Use `yield` in a block to return value | `switch (grade) { case "A" -> { System.out.println("Top!"); yield "Excellent"; } default -> "OK"; }`          | `"Excellent"` |
| `default -> ...`                        | Handles all other unmatched values     | `switch (input) { case "Yes" -> "Confirmed"; default -> "Try again"; }`                                       | `"Try again"` |
| `switch (input.toLowerCase()) { ... }`  | Can be combined with methods           | `switch (choice.toLowerCase()) { case "yes" -> "Proceed"; default -> "Cancel"; }`                             | `"Proceed"`   |
| Nested `switch` inside another          | Switch inside another switch           | `switch (category) { case "A" -> { switch (sub) { case 1 -> "A1"; default -> "Ax"; } } default -> "Other"; }` | `"A1"`        |


    // JAVA LOGICAL OPERATORS


| Operator | Name                       | Description                                    | Example               | Output                                     |              |   |             |              |
| -------- | -------------------------- | ---------------------------------------------- | --------------------- | ------------------------------------------ | ------------ | - | ----------- | ------------ |
| `&&`     | Logical AND                | True only if **both** conditions are true      | `(age > 18 && hasID)` | `true/false`                               |              |   |             |              |
| \`       |                            | \`                                             | Logical OR            | True if **at least one** condition is true | \`(isStudent |   | isSenior)\` | `true/false` |
| `!`      | Logical NOT                | Reverses the result (true becomes false, etc.) | `!(age >= 18)`        | `true/false`                               |              |   |             |              |
| `^`      | Logical XOR (exclusive or) | True if **only one** of the conditions is true | `(a > b) ^ (b > c)`   | `true/false`                               |              |   |             |              |


    // WHILE LOOPS


| Syntax / Pattern                | Description                                | Example                                                              | Output (Loop Behavior) |
| ------------------------------- | ------------------------------------------ | -------------------------------------------------------------------- | ---------------------- |
| `while (condition) { ... }`     | Repeats block **while** condition is true  | `int i = 1;`<br>`while (i <= 3) { System.out.println(i); i++; }`     | `1`<br>`2`<br>`3`      |
| `do { ... } while (condition);` | Runs block **at least once**, then repeats | `int i = 1;`<br>`do { System.out.println(i); i++; } while (i <= 3);` | `1`<br>`2`<br>`3`      |
| Infinite loop (use with care)   | Runs forever unless `break` is used        | `while (true) { ... }`                                               | Infinite loop          |
| Break inside loop               | Exits the loop early                       | `while (true) { if (x == 5) break; }`                                | Exits when `x == 5`    |
| Continue inside loop            | Skips current loop iteration               | `while (x < 10) { x++; if (x == 5) continue; }`                      | Skips when `x == 5`    |


    // FOR LOOPS


| Syntax / Pattern                        | Description                                    | Example                                                                | Output                |
| --------------------------------------- | ---------------------------------------------- | ---------------------------------------------------------------------- | --------------------- |
| `for (init; condition; update) { ... }` | Standard counting loop                         | `for (int i = 1; i <= 5; i++) { System.out.println(i); }`              | `1` to `5`            |
| Loop in reverse                         | Decreasing counter                             | `for (int i = 5; i >= 1; i--) { System.out.println(i); }`              | `5` to `1`            |
| Loop with step/increment                | Skipping values                                | `for (int i = 0; i <= 10; i += 2) { System.out.println(i); }`          | `0 2 4 6 8 10`        |
| Loop through array                      | Access each array element                      | `for (int i = 0; i < arr.length; i++) { System.out.println(arr[i]); }` | Each element in `arr` |
| Enhanced `for-each` loop                | Cleaner loop for arrays or collections         | `for (int num : arr) { System.out.println(num); }`                     | Each element in `arr` |
| Nested `for` loop                       | Loop inside a loop (e.g. multiplication table) | `for (int i=1; i<=3; i++) { for (int j=1; j<=3; j++) { ... } }`        | Matrix/table output   |


    // NESTED LOOPS
    

| Syntax / Pattern                      | Description                           | Example                                                                             | Output (simplified)    |
| ------------------------------------- | ------------------------------------- | ----------------------------------------------------------------------------------- | ---------------------- |
| `for (...) { for (...) { ... } }`     | A `for` loop inside another loop      | `for (int i=1; i<=3; i++) { for (int j=1; j<=3; j++) { ... } }`                     | 3×3 grid               |
| `while (...) { for (...) { ... } }`   | Mixing loop types                     | `while (i < 3) { for (int j=0; j<3; j++) { ... } i++; }`                            | 3×3 loop               |
| Nested for — rows/columns             | Great for patterns or grids           | `for (int row=1; row<=4; row++) { for (int col=1; col<=4; col++) { ... } }`         | 4×4 pattern            |
| Print square of `*` using nested loop | Create shape pattern                  | `System.out.print("* ");` inside inner loop + `System.out.println();` in outer loop | Square of asterisks    |
| Outer breaks inner                    | Breaking out of inner loop only       | `if (x==3) break;` inside inner loop                                                | Breaks inner loop only |
| Label and break outer loop            | Use labels to break out of both loops | `break outer;` where `outer:` is label of outer loop                                | Exits both loops       |
